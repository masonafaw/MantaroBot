/*
 * Copyright (C) 2016-2020 David Rubio Escares / Kodehawa
 *
 *  Mantaro is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *  Mantaro is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Mantaro.  If not, see http://www.gnu.org/licenses/
 */

/* Mantaro's build.gradle */

//Plugins
plugins {
    //Compiles Java
    id 'java'
    //Adds an Executable Manifest
    id 'application'
    //Creates FatJars
    id 'com.github.johnrengelman.shadow' version '6.1.0'
    //Builds docker images
    id 'com.palantir.docker' version '0.26.0'
}

mainClassName = "net.kodehawa.mantarobot.MantaroBot"
def ver = new Version(major: 6, minor: 2, revision: 7)
version ver.toString()

sourceCompatibility = 15
targetCompatibility = 15

repositories {
    mavenCentral()
    maven {
        name 'm2-dv8tion'
        url 'https://m2.dv8tion.net/releases'
    }

    jcenter()
    maven { url 'https://jitpack.io' }
}

task generateLanguageList {
    doLast {
        def out = new PrintStream(new FileOutputStream(new File(project.rootDir, "src/main/resources/assets/languages/list.txt")))
        new File(project.rootDir, "src/main/resources/assets/languages").listFiles().each {
            if (it.getName().endsWith("json")) {
                out.println(it.getName())
            }
        }

        out.close()
    }
}

dependencies {
    // Base
    implementation 'net.dv8tion:JDA:4.2.1_262'
    implementation 'club.minnced:discord-webhooks:0.5.7'

    // Music
    implementation ('com.github.FredBoat:Lavalink-Client:fac5a3caf8') {
        exclude group: 'com.sedmelluq', module: 'lavaplayer'
    } // Lavalink-Client includes LP, but we specify it below, so we need to exclude it.
    implementation 'com.sedmelluq:lavaplayer:1.3.76'
    implementation 'com.sedmelluq:lavaplayer-ext-youtube-rotator:0.2.3'

    // JSON
    implementation 'com.fasterxml.jackson.core:jackson-core:2.12.3'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.3'

    // Core
    implementation 'io.github.classgraph:classgraph:4.8.104'
    implementation 'ch.qos.logback:logback-classic:1.2.3'
    implementation 'com.google.guava:guava:30.1.1-jre'

    // Database
    implementation 'com.rethinkdb:rethinkdb-driver:2.4.4'
    implementation 'redis.clients:jedis:3.6.0'

    // Utilities
    implementation 'net.jodah:expiringmap:0.5.9'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.apache.commons:commons-text:1.9'
    implementation 'com.github.Kodehawa:imageboard-api:1907d46a98'

    //Basically for FinderUtil
    implementation 'com.jagrosh:jda-utilities-commons:3.0.5'

    // Prometheus
    implementation 'io.prometheus:simpleclient:0.9.0'
    implementation 'io.prometheus:simpleclient_hotspot:0.9.0'
    implementation 'io.prometheus:simpleclient_httpserver:0.9.0'

    //Unit tests
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.7.1'
}

task copyFileToAssets(type: Copy) {
    from shadowJar.outputs
    into file('assets')
}

copyFileToAssets.dependsOn shadowJar

docker {
    name "mantaro/mantaro:$ver"
    tag "latest", "mantaro/mantaro:latest"
    copySpec.from("assets").into("assets")
    buildArgs([
        version: ver.toString(),
        jattachVersion: "v1.5"
    ])
}

docker.dependsOn shadowJar as Task
docker.dependsOn copyFileToAssets

compileJava.dependsOn generateLanguageList

task ci {
    dependsOn shadowJar
    dependsOn tasks.docker
}

//This doesn't work?
test.dependsOn generateLanguageList

def lint = [
        "auxiliaryclass",
        "cast",
        "classfile",
        "deprecation",
        "dep-ann",
        "divzero",
        "empty",
        "exports",
        "fallthrough",
        "finally",
        "module",
        "opens",
        "options",
        "overloads",
        "overrides",
        "path",
        //removed because of "No processor claimed any of these annotations: ..."
        //"processing",
        "rawtypes",
        "removal",
        "requires-automatic",
        "requires-transitive-automatic",
        "serial",
        "static",
        "try",
        "unchecked",
        "varargs",
        "preview"
]

import org.apache.tools.ant.filters.ReplaceTokens

def gitRevision() {
    def gitVersion = new ByteArrayOutputStream()
    exec {
        commandLine("git", "rev-parse", "--short", "HEAD")
        standardOutput = gitVersion
    }

    return gitVersion.toString().trim()
}

task sourcesForRelease(type: Copy) {
    from ('src/main/java') {
        include '**/MantaroInfo.java'
        filter(ReplaceTokens, tokens: [
                version: ver.toString(),
                revision: gitRevision().toString()
        ])
    }
    into 'build/filteredSrc'

    includeEmptyDirs = false
}

task generateJavaSources(type: SourceTask) {
    def javaSources = sourceSets.main.allJava.filter {
        it.name != 'MantaroInfo.java'
    }
    source = javaSources + sourcesForRelease.destinationDir

    dependsOn sourcesForRelease
}

compileJava {
    source = generateJavaSources.source
    classpath = sourceSets.main.compileClasspath
    //options.compilerArgs += ["-Xlint:${lint.join(",")}", "-Werror"]
    options.compilerArgs += ["-Xlint:${lint.join(",")}"]

    dependsOn generateJavaSources
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.incremental = true
}

build.dependsOn shadowJar

shadowJar {
    archiveClassifier.set(null)
    exclude 'module-info.class'
}

class Version {
    String major, minor, revision

    String toString() {
        "${major}.${minor}.${revision}"
    }
}
